<!-- Generated with SimSnap -->
<!-- -->
<!-- input tree: (0[0.1]:10,1[0.1]:10)[0.1];-->
<snap version='2.0' namespace='snap:beast.util'>

<map name='snapprior'>snap.likelihood.SnAPPrior</map>
<map name='snaptreelikelihood'>snap.likelihood.SnAPTreeLikelihood</map>



	<!-- n = 1 -->
	<data spec='snap.Data' id='alignment' dataType='integerdata' statecount='11'>
		<sequence taxon='A' totalcount='10'>
5,		</sequence>
		<sequence taxon='B' totalcount='10'>
5,		</sequence>
	</data>



<run id='mcmc' spec='snap.MCMC' chainLength='1' preBurnin='0' stateBurnin='0' killAfter='0'>
        <state>
          <stateNode spec='GammaParameter' id='gamma' initFromTree='true' pattern='gamma' value='20'>
            <tree idref='tree'/>
          </stateNode>

          <parameter name='stateNode' id='v' value='1' lower='0.0'/>
          <parameter name='stateNode' id='u' value='1' lower='0.0'/>
          <parameter name='stateNode' id='alpha'  value='2' lower='0.0'/>
          <parameter name='stateNode' id='beta'   value='200' lower='0.0'/>
          <parameter name='stateNode' id='lambda' value='10' lower='0.0'/>

           <tree name='stateNode' spec='TreeParser' id='tree' 
nodetype='snap.NodeData' >
               <input 
name='newick'>(A[theta=0.1]:1,B[theta=0.1]:1)[theta=0.1]</input>
               <input name='taxa' idref='alignment'/>
         </tree>
        </state>

        <distribution id='posterior' spec='beast.core.util.CompoundDistribution'>
 	          <snapprior name='distribution' id='prior'>
	              <input name='alpha' idref='alpha'/>
    		      <input name='beta' idref='beta'/>
	    	      <input name='lambda' idref='lambda'/>
	              <input name='gamma' idref='gamma'/>
		          <input name='tree' idref='tree'/>
            </snapprior>
            <snaptreelikelihood name='distribution' id='treeLikelihood'>
                <input name='data' idref='alignment'/>
                <input name='tree' idref='tree'/>
                <input name='mutationRateU' idref='u'/>
                <input name='mutationRateV' idref='v'/>
	              <input name='gamma' idref='gamma'/>
            </snaptreelikelihood>
        </distribution>

        <stateDistribution idref='prior'/>

    	<operator spec='operators.NodeSwapper' weight='0.0'>
	        <tree name='tree' idref='tree'/>
    	</operator>
        <operator spec='operators.NodeBudger' weight='0.5' size='0.5'>
            <tree name='tree' idref='tree'/>
        </operator>
	    <operator spec='operators.ScaleOperator' scaleFactor='0.25' weight='0.0'>
	        <tree name='tree' idref='tree'/>
    	</operator>
        <operator spec='operators.GammaMover' pGammaMove='0.5' weight='0'>
	        <parameter name='gamma' idref='gamma'/>
        </operator>
        <operator spec='operators.RateMixer' scaleFactors='0.25' weight='0'>
	        <tree name='tree' idref='tree'/>
	        <parameter name='gamma' idref='gamma'/>
        </operator>

        <logger logEvery='1'>
			  <model idref='posterior'/>
            <log idref='u'/>
            <log idref='v'/>
            <log idref='prior'/>
            <log idref='treeLikelihood'/>
            <log idref='posterior'/>
	          <log idref='gamma'/>
	          <log spec='snap.ThetaLogger'>
		          <gamma idref='gamma'/>
	          </log>
	          <log spec='beast.evolution.tree.TreeHeightLogger'>
		         <tree idref='tree'/>
	          </log>
              <log idref='tree'/>
        </logger>
        <logger logEvery='1' fileName='SimSnapInput.$(seed).log'>
	          <model idref='posterior'/>
            <log idref='u'/>
            <log idref='v'/>
            <log idref='prior'/>
            <log idref='treeLikelihood'/>
            <log idref='posterior'/>
			<log idref='gamma'/>
			<log spec='snap.ThetaLogger'>
				<gamma idref='gamma'/>
			</log>
			<log spec='beast.evolution.tree.TreeHeightLogger'>
				<tree idref='tree'/>
			</log>
        </logger>
        <logger logEvery='100' fileName='SimSnapInput.$(seed).trees'>
            <log idref='tree'/>
        </logger>
</run>


</snap>
